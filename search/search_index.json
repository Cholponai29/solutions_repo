{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"import numpy as np import matplotlib.pyplot as plt g = 9.81 # gravitational acceleration (m/s^2) def calculate_range(v0, theta_deg, h0=0): \"\"\" Calculate the range of a projectile launched at angle theta_deg with initial speed v0 and initial height h0. \"\"\" theta = np.radians(theta_deg) if h0 == 0: # Simplified range formula when launch height is 0 R = (v0**2 * np.sin(2 * theta)) / g else: # Generalized formula considering launch height h0 R = (v0 * np.cos(theta)) * ( v0 * np.sin(theta) + np.sqrt((v0 * np.sin(theta))**2 + 2 * g * h0) ) / g return R v0_values = [10, 20, 30] # different initial velocities angles = np.linspace(0, 90, 500) plt.figure(figsize=(10, 6)) for v0 in v0_values: ranges = [calculate_range(v0, angle) for angle in angles] plt.plot(angles, ranges, label=f'v\u2080 = {v0} m/s') plt.title('Projectile Range vs Launch Angle') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.legend() plt.grid(True) plt.tight_layout() plt.show() \"a problem1\")","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp System Parameters gamma = 0.2 # Damping coefficient omega0 = 1.0 # Natural frequency of the pendulum A = 1.2 # Amplitude of the external driving force omega_d = 2/3 # Driving frequency Time span for simulation t_max = 100 t_points = np.linspace(0, t_max, 10000) Differential equations for the forced damped pendulum def forced_damped_pendulum(t, y): theta, omega = y dtheta_dt = omega domega_dt = -gamma * omega - omega0**2 * np.sin(theta) + A * np.cos(omega_d * t) return [dtheta_dt, domega_dt] Initial conditions: [angle, angular velocity] y0 = [0.2, 0.0] Solve the system using Runge-Kutta method solution = solve_ivp(forced_damped_pendulum, [0, t_max], y0, t_eval=t_points, method='RK45') Extract solution theta = solution.y[0] omega = solution.y[1] time = solution.t Normalize angle to be within (-\u03c0, \u03c0) for better visualization theta_mod = ((theta + np.pi) % (2 * np.pi)) - np.pi Plot: Angle over time plt.figure(figsize=(10, 4)) plt.plot(time, theta_mod) plt.xlabel('Time (s)') plt.ylabel('Angle \u03b8 (rad)') plt.title('Forced Damped Pendulum: Angle over Time') plt.grid(True) plt.tight_layout() plt.show() Plot: Phase portrait (\u03b8 vs \u03c9) plt.figure(figsize=(6, 6)) plt.plot(theta_mod, omega, lw=0.5) plt.xlabel('\u03b8 (rad)') plt.ylabel('\u03c9 (rad/s)') plt.title('Phase Portrait') plt.grid(True) plt.tight_layout() plt.show() Plot: Poincar\u00e9 section (samples taken once every driving period) T_drive = 2 * np.pi / omega_d poincare_times = np.arange(0, t_max, T_drive) theta_poincare = [] omega_poincare = [] for t_cross in poincare_times: idx = np.searchsorted(time, t_cross) if idx < len(time): theta_poincare.append(theta_mod[idx]) omega_poincare.append(omega[idx]) plt.figure(figsize=(6, 6)) plt.scatter(theta_poincare, omega_poincare, s=5, color='red') plt.xlabel('\u03b8 (rad)') plt.ylabel('\u03c9 (rad/s)') plt.title('Poincar\u00e9 Section') plt.grid(True) plt.tight_layout() plt.show()","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#system-parameters","text":"gamma = 0.2 # Damping coefficient omega0 = 1.0 # Natural frequency of the pendulum A = 1.2 # Amplitude of the external driving force omega_d = 2/3 # Driving frequency","title":"System Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#time-span-for-simulation","text":"t_max = 100 t_points = np.linspace(0, t_max, 10000)","title":"Time span for simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equations-for-the-forced-damped-pendulum","text":"def forced_damped_pendulum(t, y): theta, omega = y dtheta_dt = omega domega_dt = -gamma * omega - omega0**2 * np.sin(theta) + A * np.cos(omega_d * t) return [dtheta_dt, domega_dt]","title":"Differential equations for the forced damped pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#initial-conditions-angle-angular-velocity","text":"y0 = [0.2, 0.0]","title":"Initial conditions: [angle, angular velocity]"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#solve-the-system-using-runge-kutta-method","text":"solution = solve_ivp(forced_damped_pendulum, [0, t_max], y0, t_eval=t_points, method='RK45')","title":"Solve the system using Runge-Kutta method"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#extract-solution","text":"theta = solution.y[0] omega = solution.y[1] time = solution.t","title":"Extract solution"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#normalize-angle-to-be-within-for-better-visualization","text":"theta_mod = ((theta + np.pi) % (2 * np.pi)) - np.pi","title":"Normalize angle to be within (-\u03c0, \u03c0) for better visualization"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plot-angle-over-time","text":"plt.figure(figsize=(10, 4)) plt.plot(time, theta_mod) plt.xlabel('Time (s)') plt.ylabel('Angle \u03b8 (rad)') plt.title('Forced Damped Pendulum: Angle over Time') plt.grid(True) plt.tight_layout() plt.show()","title":"Plot: Angle over time"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plot-phase-portrait-vs","text":"plt.figure(figsize=(6, 6)) plt.plot(theta_mod, omega, lw=0.5) plt.xlabel('\u03b8 (rad)') plt.ylabel('\u03c9 (rad/s)') plt.title('Phase Portrait') plt.grid(True) plt.tight_layout() plt.show()","title":"Plot: Phase portrait (\u03b8 vs \u03c9)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plot-poincare-section-samples-taken-once-every-driving-period","text":"T_drive = 2 * np.pi / omega_d poincare_times = np.arange(0, t_max, T_drive) theta_poincare = [] omega_poincare = [] for t_cross in poincare_times: idx = np.searchsorted(time, t_cross) if idx < len(time): theta_poincare.append(theta_mod[idx]) omega_poincare.append(omega[idx]) plt.figure(figsize=(6, 6)) plt.scatter(theta_poincare, omega_poincare, s=5, color='red') plt.xlabel('\u03b8 (rad)') plt.ylabel('\u03c9 (rad/s)') plt.title('Poincar\u00e9 Section') plt.grid(True) plt.tight_layout() plt.show()","title":"Plot: Poincar\u00e9 section (samples taken once every driving period)"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"... import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # Mass of Earth (kg) Generate a range of orbital radii (in meters) radii = np.linspace(7e6, 4.2e7, 100) # from 7,000 km to 42,000 km Calculate orbital periods for circular orbits def orbital_period(r, M): return 2 * np.pi * np.sqrt(r**3 / (G * M)) periods = orbital_period(radii, M) Plot T^2 vs r^3 T_squared = periods 2 r_cubed = radii 3 plt.figure(figsize=(8, 5)) plt.plot(r_cubed, T_squared, label=r\" \\(T^2\\) vs \\(r^3\\) \", color='navy') plt.xlabel(r\"Orbital Radius Cubed \\(r^3\\) (m \\(^3\\) )\") plt.ylabel(r\"Orbital Period Squared \\(T^2\\) (s \\(^2\\) )\") plt.title(\"Kepler's Third Law: \\(T^2 \\propto r^3\\) \") plt.grid(True) plt.legend() plt.tight_layout() plt.show() Optional: Show a linear fit to confirm proportionality from scipy.stats import linregress slope, intercept, r_value, *_ = linregress(r_cubed, T_squared) print(f\"Fitted slope (should be ~4\u03c0\u00b2/GM): {slope:.3e}\") print(f\"R\u00b2 value: {r_value**2:.5f} (should be close to 1)\") ...","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants","text":"G = 6.67430e-11 # Gravitational constant (m^3 kg^-1 s^-2) M = 5.972e24 # Mass of Earth (kg)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#generate-a-range-of-orbital-radii-in-meters","text":"radii = np.linspace(7e6, 4.2e7, 100) # from 7,000 km to 42,000 km","title":"Generate a range of orbital radii (in meters)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#calculate-orbital-periods-for-circular-orbits","text":"def orbital_period(r, M): return 2 * np.pi * np.sqrt(r**3 / (G * M)) periods = orbital_period(radii, M)","title":"Calculate orbital periods for circular orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plot-t2-vs-r3","text":"T_squared = periods 2 r_cubed = radii 3 plt.figure(figsize=(8, 5)) plt.plot(r_cubed, T_squared, label=r\" \\(T^2\\) vs \\(r^3\\) \", color='navy') plt.xlabel(r\"Orbital Radius Cubed \\(r^3\\) (m \\(^3\\) )\") plt.ylabel(r\"Orbital Period Squared \\(T^2\\) (s \\(^2\\) )\") plt.title(\"Kepler's Third Law: \\(T^2 \\propto r^3\\) \") plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"Plot T^2 vs r^3"},{"location":"1%20Physics/2%20Gravity/Problem_1/#optional-show-a-linear-fit-to-confirm-proportionality","text":"from scipy.stats import linregress slope, intercept, r_value, *_ = linregress(r_cubed, T_squared) print(f\"Fitted slope (should be ~4\u03c0\u00b2/GM): {slope:.3e}\") print(f\"R\u00b2 value: {r_value**2:.5f} (should be close to 1)\") ...","title":"Optional: Show a linear fit to confirm proportionality"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # Gravitational constant (m^3/kg/s^2) Celestial body data: name, radius (m), mass (kg) bodies = { \"Earth\": { \"radius\": 6.371e6, \"mass\": 5.972e24 }, \"Mars\": { \"radius\": 3.3895e6, \"mass\": 6.417e23 }, \"Jupiter\": { \"radius\": 6.9911e7, \"mass\": 1.898e27 } } Functions for cosmic velocities def first_cosmic_velocity(M, R): return np.sqrt(G * M / R) def second_cosmic_velocity(M, R): return np.sqrt(2) * first_cosmic_velocity(M, R) Third cosmic velocity estimation from Earth def third_cosmic_velocity(M_sun, R_earth_orbit): return np.sqrt(2 * G * M_sun / R_earth_orbit) Compute and display velocities print(\"Cosmic Velocities (km/s):\\n\") for body, data in bodies.items(): v1 = first_cosmic_velocity(data[\"mass\"], data[\"radius\"]) / 1000 # km/s v2 = second_cosmic_velocity(data[\"mass\"], data[\"radius\"]) / 1000 print(f\"{body}:\") print(f\" 1st Cosmic Velocity: {v1:.2f} km/s\") print(f\" 2nd Cosmic Velocity: {v2:.2f} km/s\") Estimate 3rd cosmic velocity (from Earth orbit) R_earth_orbit = 1.496e11 # in meters M_sun = 1.989e30 # kg v3 = third_cosmic_velocity(M_sun, R_earth_orbit) / 1000 # km/s print(f\"\\nThird Cosmic Velocity (from Earth orbit): {v3:.2f} km/s\") Visualization labels = [] v1_vals = [] v2_vals = [] for body, data in bodies.items(): labels.append(body) v1_vals.append(first_cosmic_velocity(data[\"mass\"], data[\"radius\"]) / 1000) v2_vals.append(second_cosmic_velocity(data[\"mass\"], data[\"radius\"]) / 1000) x = np.arange(len(labels)) width = 0.35 plt.figure(figsize=(10, 6)) plt.bar(x - width/2, v1_vals, width, label='1st Cosmic Velocity') plt.bar(x + width/2, v2_vals, width, label='2nd Cosmic Velocity') plt.axhline(v3, color='red', linestyle='--', label='3rd Cosmic Velocity (Sun escape)') plt.xticks(x, labels) plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities for Various Celestial Bodies') plt.legend() plt.grid(True, linestyle='--', alpha=0.6) plt.tight_layout() plt.show()","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"import numpy as np import matplotlib.pyplot as plt","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#constants","text":"G = 6.67430e-11 # Gravitational constant (m^3/kg/s^2)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_2/#celestial-body-data-name-radius-m-mass-kg","text":"bodies = { \"Earth\": { \"radius\": 6.371e6, \"mass\": 5.972e24 }, \"Mars\": { \"radius\": 3.3895e6, \"mass\": 6.417e23 }, \"Jupiter\": { \"radius\": 6.9911e7, \"mass\": 1.898e27 } }","title":"Celestial body data: name, radius (m), mass (kg)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#functions-for-cosmic-velocities","text":"def first_cosmic_velocity(M, R): return np.sqrt(G * M / R) def second_cosmic_velocity(M, R): return np.sqrt(2) * first_cosmic_velocity(M, R)","title":"Functions for cosmic velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#third-cosmic-velocity-estimation-from-earth","text":"def third_cosmic_velocity(M_sun, R_earth_orbit): return np.sqrt(2 * G * M_sun / R_earth_orbit)","title":"Third cosmic velocity estimation from Earth"},{"location":"1%20Physics/2%20Gravity/Problem_2/#compute-and-display-velocities","text":"print(\"Cosmic Velocities (km/s):\\n\") for body, data in bodies.items(): v1 = first_cosmic_velocity(data[\"mass\"], data[\"radius\"]) / 1000 # km/s v2 = second_cosmic_velocity(data[\"mass\"], data[\"radius\"]) / 1000 print(f\"{body}:\") print(f\" 1st Cosmic Velocity: {v1:.2f} km/s\") print(f\" 2nd Cosmic Velocity: {v2:.2f} km/s\")","title":"Compute and display velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#estimate-3rd-cosmic-velocity-from-earth-orbit","text":"R_earth_orbit = 1.496e11 # in meters M_sun = 1.989e30 # kg v3 = third_cosmic_velocity(M_sun, R_earth_orbit) / 1000 # km/s print(f\"\\nThird Cosmic Velocity (from Earth orbit): {v3:.2f} km/s\")","title":"Estimate 3rd cosmic velocity (from Earth orbit)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#visualization","text":"labels = [] v1_vals = [] v2_vals = [] for body, data in bodies.items(): labels.append(body) v1_vals.append(first_cosmic_velocity(data[\"mass\"], data[\"radius\"]) / 1000) v2_vals.append(second_cosmic_velocity(data[\"mass\"], data[\"radius\"]) / 1000) x = np.arange(len(labels)) width = 0.35 plt.figure(figsize=(10, 6)) plt.bar(x - width/2, v1_vals, width, label='1st Cosmic Velocity') plt.bar(x + width/2, v2_vals, width, label='2nd Cosmic Velocity') plt.axhline(v3, color='red', linestyle='--', label='3rd Cosmic Velocity (Sun escape)') plt.xticks(x, labels) plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities for Various Celestial Bodies') plt.legend() plt.grid(True, linestyle='--', alpha=0.6) plt.tight_layout() plt.show()","title":"Visualization"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}